q
params
q
distribution_group
c
q
create_email_distribution_group_query( ldap, distribution_group )
c
default_domain
c
delete_users_account_email_alias_query( ldap, user_uid, email_address )
email_address
user_uid
c
q
response
q
params
q
user_uid
q
user_uid
c
get '/users/accounts/', uid: 'testuser'
get '/users/accounts/', user_uid: 'testuser'
q
response
b
c
params[:user_uid]
[ params[:user_id], params[:email] ]
ldap.create_users_account_email params[:user_id], params[:email]
params[:user_uid]
params
q
user_uid
c
email
user_uid
q
entry.dn
entry.dc
c
entry.dc
entry
c
q
c
where
email_address
email_address[:address]
distribution_list_name
c
delete_email_distribution_group_email_address_query( ldap, distribution_list_name, email_address[:address] )
distribution_list_name
email_address[:address]
email_address
q
response
c
q
response
c
response
q
response
q
response
c
default_domain
c
default_domain
c
q
where
help
source
backtrace
trace
group_name
user_uid
c
xxx
c
group_name
user_uid
q
[ ldap, user_uid, group_name ]
delete_users_account_group_query ldap, user_uid, group_name
c
q
c
post '/users/accounts/', account: { uid: 'testuser', first_name: 'Test', last_name: 'User' }
c
q
c
q
e
q
e
c
q
user
c
index_users_groups_query( ldap )
index_users_accounts_query( ldap )
q
c
q
response
q
c
q
entry.dn
entry.dn, attribute, value
q
ldap.get_operation_result.message
ldap.get_operation_result.error_message
replace_attribute_value_on_entry_helper ldap, entry, "description", distribution_group[:description]
distribution_group[:description]
entry.respond_to?(:description)
show_distribution_group_query( ldap, new_name )
c
show_distribution_group_query( ldap, new_name )
c
show_distribution_group_query( ldap, new_name )
q
name
show_distribution_group_query( ldap, name )
q
entry
show_distribution_group_query( ldap, entry )
show_distribution_group_query( ldap, name )
show_distribution_group_query( name )
q
response
c
e
c
q
ldap.get_operation_result.error_message
            ldap.rename({                olddn: entry.dn,                newrdn: newrdn,                delete_attributes: true              })
newrdn
entry.dn
q
name
ldap.get_operation_result.error_message
update_entry_rdn_helper( ldap, entry, [name] )
name
update_entry_rdn_helper( ldap, entry, [name] )
ldap.get_operation_result.message
ldap.get_operation_result.error
ldap.get_operation_result.error_message
update_entry_rdn_helper( ldap, entry, name )
entry.dn
name
entry
q
entry.dn
entry.dc
ldap.get_operation_result.error_message
ldap.replace_attribute entry.dn, attribute, value
c
entry.dc
ldap.modify(dn: entry.dn, operations: [ [:replace, attribute, [ value ] ] ] )
ldap.get_operation_result.error_message
ldap.modify(dn: entry.dn, operations: [ [:replace, attribute, value ] ] )
entry.dn
q
name
replace_attribute_value_on_entry_helper( ldap, entry, 'dc', name )
entry.each do |ent| p ent end
entry.each do |en| p en; end
entry.each { |en| p en; }
entry.each do { |en| p en; }
entry.each do { |e| p e; }
entry.each do { |e| p e }
ldap.get_operation_result.error_message
replace_attribute_value_on_entry_helper( ldap, entry, 'domaincomponent1', name )
ldap.get_operation_result.error_message
replace_attribute_value_on_entry_helper( ldap, entry, 'domaincomponent', name )
entry.dc
entry
ldap.get_operation_result.error_message
replace_attribute_value_on_entry_helper( ldap, entry, 'dc', name )
replace_attribute_value_on_entry_helper( ldap, entry, :dc, name )
entry
c
delete_entry_helper ldap, entry
entry
q
entry unless entry.dn == dn
entry.dn == dn
q
entry
q
entry.dc[1]
entry.dc
entry
c
entry
q
entry.dn == dn
entry.dn
entry
c
q
ldap.get_operation_result.error_message
ldap.get_operation_result.message
ldap.last_error
ldap.modify(dn: entry.dn, operations: [ [:replace, attribute, value ] ] )
attribute = 'dc'
attribute
ldap.modify(dn: entry.dn, operations: [ [:replace, attribute, value ] ] )
value
attribute
entry.dn
q
replace_attribute_value_on_entry_helper( ldap, entry, :dc, name )
name
q
last_response.body
put '/email/default_domain', domain_name: 'testdomain.fake'
q
last_response.body
put '/email/default_domain', domain_name: 'testdomain.fake'
last_response.body
last_response
q
response.class
response
q
ldap.create_email_default_domain( params[:domain_name] )
ldap.create_email_default_domain( params[:domain_name] ).to_json
q
ldap.create_email_default_domain( params[:domain_name] )
q
show_email_query ldap
q
response
q
c
email_domains_helper( ldap )
email_default_domain_helper( ldap )
q
c
q
entry
entry.memberuid
q
entry.memberuid.each
entry.memberuid
entry
c
entry.cn
q
